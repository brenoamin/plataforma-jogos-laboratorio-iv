// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

module sprits_finder_position
(
// {ALTERA_ARGS_BEGIN} DO NOT REMOVE THIS LINE!

	AUD_ADCDAT,
	AUD_ADCLRCK,
	AUD_BCLK,
	AUD_DACDAT,
	AUD_DACLRCK,
	AUD_XCK,
	CLOCK2_50,
	CLOCK3_50,
	CLOCK_50,
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,
	EEP_I2C_SCLK,
	EEP_I2C_SDAT,
	ENET0_GTX_CLK,
	ENET0_INT_N,
	ENET0_LINK100,
	ENET0_MDC,
	ENET0_MDIO,
	ENET0_RESET_N,
	ENET0_RX_CLK,
	ENET0_RX_COL,
	ENET0_RX_CRS,
	ENET0_RX_DATA,
	ENET0_RX_DV,
	ENET0_RX_ER,
	ENET0_TX_CLK,
	ENET0_TX_DATA,
	ENET0_TX_EN,
	ENET0_TX_ER,
	ENET1_GTX_CLK,
	ENET1_INT_N,
	ENET1_LINK100,
	ENET1_MDC,
	ENET1_MDIO,
	ENET1_RESET_N,
	ENET1_RX_CLK,
	ENET1_RX_COL,
	ENET1_RX_CRS,
	ENET1_RX_DATA,
	ENET1_RX_DV,
	ENET1_RX_ER,
	ENET1_TX_CLK,
	ENET1_TX_DATA,
	ENET1_TX_EN,
	ENET1_TX_ER,
	EXT_IO,
	FL_ADDR,
	FL_CE_N,
	FL_DQ,
	FL_OE_N,
	FL_RESET_N,
	FL_RY,
	FL_WE_N,
	FL_WP_N,
	GPIO,
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,
	HSMC_CLKIN0,
	HSMC_CLKIN_N1,
	HSMC_CLKIN_N2,
	HSMC_CLKIN_P1,
	HSMC_CLKIN_P2,
	HSMC_CLKOUT0,
	HSMC_CLKOUT_N1,
	HSMC_CLKOUT_N2,
	HSMC_CLKOUT_P1,
	HSMC_CLKOUT_P2,
	HSMC_D,
	HSMC_RX_D_N,
	HSMC_RX_D_P,
	HSMC_TX_D_N,
	HSMC_TX_D_P,
	H_pos_in,
	I2C_SCLK,
	I2C_SDAT,
	IRDA_RXD,
	KEY,
	LCD_BLON,
	LCD_DATA,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW,
	LEDG,
	LEDR,
	NETCLK_25,
	OTG_ADDR,
	OTG_CS_N,
	OTG_DACK_N,
	OTG_DATA,
	OTG_DREQ,
	OTG_FSPEED,
	OTG_INT,
	OTG_LSPEED,
	OTG_OE_N,
	OTG_RST_N,
	OTG_WE_N,
	PS2_KBCLK,
	PS2_KBDAT,
	PS2_MSCLK,
	PS2_MSDAT,
	SD_CLK,
	SD_CMD,
	SD_DAT,
	SD_WP_N,
	SMA_CLKIN,
	SMA_CLKOUT,
	SRAM_ADDR,
	SRAM_CE_N,
	SRAM_DQ,
	SRAM_LB_N,
	SRAM_OE_N,
	SRAM_UB_N,
	SRAM_WE_N,
	SW,
	TD_CLK27,
	TD_DATA,
	TD_HS,
	TD_RESET_N,
	TD_VS,
	UART_CTS,
	UART_RTS,
	UART_RXD,
	UART_TXD,
	VGA_B,
	VGA_BLANK_N,
	VGA_CLK,
	VGA_G,
	VGA_HS,
	VGA_R,
	VGA_SYNC_N,
	VGA_VS,
	V_pos_in,
	active_finder_position,
	active_high_four,
	clk,
	high_four,
	rst
// {ALTERA_ARGS_END} DO NOT REMOVE THIS LINE!

);

// {ALTERA_IO_BEGIN} DO NOT REMOVE THIS LINE!
input			AUD_ADCDAT;
input			AUD_ADCLRCK;
input			AUD_BCLK;
input			AUD_DACDAT;
input			AUD_DACLRCK;
input			AUD_XCK;
input			CLOCK2_50;
input			CLOCK3_50;
input			CLOCK_50;
input	[0:12]	DRAM_ADDR;
input	[0:1]	DRAM_BA;
input			DRAM_CAS_N;
input			DRAM_CKE;
input			DRAM_CLK;
input			DRAM_CS_N;
input	[0:31]	DRAM_DQ;
input	[0:3]	DRAM_DQM;
input			DRAM_RAS_N;
input			DRAM_WE_N;
input			EEP_I2C_SCLK;
input			EEP_I2C_SDAT;
input			ENET0_GTX_CLK;
input			ENET0_INT_N;
input			ENET0_LINK100;
input			ENET0_MDC;
input			ENET0_MDIO;
input			ENET0_RESET_N;
input			ENET0_RX_CLK;
input			ENET0_RX_COL;
input			ENET0_RX_CRS;
input	[0:3]	ENET0_RX_DATA;
input			ENET0_RX_DV;
input			ENET0_RX_ER;
input			ENET0_TX_CLK;
input	[0:3]	ENET0_TX_DATA;
input			ENET0_TX_EN;
input			ENET0_TX_ER;
input			ENET1_GTX_CLK;
input			ENET1_INT_N;
input			ENET1_LINK100;
input			ENET1_MDC;
input			ENET1_MDIO;
input			ENET1_RESET_N;
input			ENET1_RX_CLK;
input			ENET1_RX_COL;
input			ENET1_RX_CRS;
input	[0:3]	ENET1_RX_DATA;
input			ENET1_RX_DV;
input			ENET1_RX_ER;
input			ENET1_TX_CLK;
input	[0:3]	ENET1_TX_DATA;
input			ENET1_TX_EN;
input			ENET1_TX_ER;
input	[0:6]	EXT_IO;
input	[0:22]	FL_ADDR;
input			FL_CE_N;
input	[0:7]	FL_DQ;
input			FL_OE_N;
input			FL_RESET_N;
input			FL_RY;
input			FL_WE_N;
input			FL_WP_N;
input	[0:35]	GPIO;
input	[0:6]	HEX0;
input	[0:6]	HEX1;
input	[0:6]	HEX2;
input	[0:6]	HEX3;
input	[0:6]	HEX4;
input	[0:6]	HEX5;
input	[0:6]	HEX6;
input	[0:6]	HEX7;
input			HSMC_CLKIN0;
input			HSMC_CLKIN_N1;
input			HSMC_CLKIN_N2;
input			HSMC_CLKIN_P1;
input			HSMC_CLKIN_P2;
input			HSMC_CLKOUT0;
input			HSMC_CLKOUT_N1;
input			HSMC_CLKOUT_N2;
input			HSMC_CLKOUT_P1;
input			HSMC_CLKOUT_P2;
input	[0:3]	HSMC_D;
input	[0:16]	HSMC_RX_D_N;
input	[0:16]	HSMC_RX_D_P;
input	[0:16]	HSMC_TX_D_N;
input	[0:16]	HSMC_TX_D_P;
input	[9:0]	H_pos_in;
input			I2C_SCLK;
input			I2C_SDAT;
input			IRDA_RXD;
input	[0:3]	KEY;
input			LCD_BLON;
input	[0:7]	LCD_DATA;
input			LCD_EN;
input			LCD_ON;
input			LCD_RS;
input			LCD_RW;
input	[0:8]	LEDG;
input	[0:17]	LEDR;
input			NETCLK_25;
input	[0:1]	OTG_ADDR;
input			OTG_CS_N;
input	[0:1]	OTG_DACK_N;
input	[0:15]	OTG_DATA;
input	[0:1]	OTG_DREQ;
input			OTG_FSPEED;
input	[0:1]	OTG_INT;
input			OTG_LSPEED;
input			OTG_OE_N;
input			OTG_RST_N;
input			OTG_WE_N;
input			PS2_KBCLK;
input			PS2_KBDAT;
input			PS2_MSCLK;
input			PS2_MSDAT;
input			SD_CLK;
input			SD_CMD;
input	[0:3]	SD_DAT;
input			SD_WP_N;
input			SMA_CLKIN;
input			SMA_CLKOUT;
input	[0:19]	SRAM_ADDR;
input			SRAM_CE_N;
input	[0:15]	SRAM_DQ;
input			SRAM_LB_N;
input			SRAM_OE_N;
input			SRAM_UB_N;
input			SRAM_WE_N;
input	[0:17]	SW;
input			TD_CLK27;
input	[0:7]	TD_DATA;
input			TD_HS;
input			TD_RESET_N;
input			TD_VS;
input			UART_CTS;
input			UART_RTS;
input			UART_RXD;
input			UART_TXD;
input	[0:7]	VGA_B;
input			VGA_BLANK_N;
input			VGA_CLK;
input	[0:7]	VGA_G;
input			VGA_HS;
input	[0:7]	VGA_R;
input			VGA_SYNC_N;
input			VGA_VS;
input	[9:0]	V_pos_in;
input			active_finder_position;
output			active_high_four;
input			clk;
output	[3:0]	high_four;
input			rst;

// {ALTERA_IO_END} DO NOT REMOVE THIS LINE!
// {ALTERA_MODULE_BEGIN} DO NOT REMOVE THIS LINE!
// {ALTERA_MODULE_END} DO NOT REMOVE THIS LINE!
endmodule

